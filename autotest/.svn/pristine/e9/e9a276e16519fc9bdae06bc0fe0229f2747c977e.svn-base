/**
 * 
 */
package com.activenetwork.qa.awo.pages.orms.licenseManager;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.activenetwork.qa.awo.datacollection.legacy.orms.Suspension;
import com.activenetwork.qa.testapi.ErrorOnPageException;
import com.activenetwork.qa.testapi.ItemNotFoundException;
import com.activenetwork.qa.testapi.ObjectNotFoundException;
import com.activenetwork.qa.testapi.interfaces.browser.Browser;
import com.activenetwork.qa.testapi.interfaces.html.IHtmlObject;
import com.activenetwork.qa.testapi.interfaces.html.IHtmlTable;
import com.activenetwork.qa.testapi.util.DateFunctions;
import com.activenetwork.qa.testapi.util.RegularExpression;

/**
 * @ScriptName LicMgrCustomerSuspensionPage.java
 * @Date:Feb 15, 2011
 * @Description:
 * @author asun
 */
public class LicMgrCustomerSuspensionPage extends LicMgrCustomerDetailsPage {

	private static LicMgrCustomerSuspensionPage instance = null;

	private LicMgrCustomerSuspensionPage() {
	};

	public static LicMgrCustomerSuspensionPage getInstance() {
		if (instance == null) {
			instance = new LicMgrCustomerSuspensionPage();
		}
		return instance;
	}

	@Override
	public boolean exists() {
		return browser.checkHtmlObjectExists(".class", "Html.TABLE", ".id",
				"suspensionList_LIST");
	}

	@SuppressWarnings("deprecation")
	public List<Suspension> getSuspensions() {
		List<Suspension> list = new ArrayList<Suspension>();
		IHtmlObject[] objs = browser.getTableTestObject(".id",
				"suspensionList_LIST");

		if (objs.length < 1) {
			throw new ObjectNotFoundException(
					"no table which id=suspensionList_LIST is found!");
		}

		IHtmlTable table = (IHtmlTable) objs[0];
		int row = table.rowCount();

		for (int i = 1; i < row; i++) {
			Suspension s = new Suspension();
			Date d;
			s.id = table.getCellValue(i, 1);
			s.status = table.getCellValue(i, 2);
			s.type = table.getCellValue(i, 3);

			s.beginDate = table.getCellValue(i, 4).trim();
			if (s.beginDate.length() > 1) {
				d = new Date(s.beginDate);
				s.beginDate = DateFunctions.formatDate(DateFunctions
						.formatDate(d, "MM/dd/yyyy"));
			}

			s.endDate = table.getCellValue(i, 5).trim();
			if (s.endDate.length() > 1) {
				d = new Date(s.endDate);
				s.endDate = DateFunctions.formatDate(DateFunctions.formatDate(
						d, "MM/dd/yyyy"));
			}

			s.datePosted = table.getCellValue(i, 6).trim();
			if (s.datePosted.length() > 1) {
				d = new Date(s.datePosted);
				s.datePosted = DateFunctions.formatDate(DateFunctions
						.formatDate(d, "MM/dd/yyyy"));
			}

			s.comment = table.getCellValue(i, 8);
			list.add(s);
		}
		return list;
	}

	/**
	 * Get suspension by id
	 * @param id
	 * @return
	 */
	public Suspension getSuspensionById(String id) {
		IHtmlObject[] objs = browser.getTableTestObject(".id", "suspensionList_LIST");

		if (objs.length < 1) {
			throw new ObjectNotFoundException(
					"No table which id=suspensionList_LIST is found!");
		}

		IHtmlTable table = (IHtmlTable) objs[0];
		int rowNum = table.findRow(1, id);
		if(rowNum == -1) {
			throw new ErrorOnPageException("Can't find Suspension record which id=" + id);
		}
		
		List<String> rowValue = table.getRowValues(rowNum);
		Suspension suspension = new Suspension();
		suspension.id = id;
		suspension.status = rowValue.get(2);
		suspension.type = rowValue.get(3);
		suspension.beginDate = rowValue.get(4);
		suspension.endDate = rowValue.get(5);
		suspension.datePosted = rowValue.get(6);
		suspension.details = rowValue.get(7);
		suspension.comment = rowValue.get(8);
		
		Browser.unregister(objs);
		return suspension;
	}
	
	/**
	 * get the row by unique comments that generated by
	 * DataBaseFunctions.getEmailSequence()
	 * 
	 * @param comments
	 * @return
	 * @Return int
	 * @Throws
	 */
	public int getSuspensionRow(String comments) {
		int row = 0;
		IHtmlObject[] objs = browser.getTableTestObject(".id",
				"suspensionList_LIST");

		if (objs.length < 1) {
			throw new ObjectNotFoundException(
					"Table that id=suspensionList_LIST is not found !");
		}
		IHtmlTable table = (IHtmlTable) objs[0];
		row = table.findRow(8, comments);
		Browser.unregister(objs);
		return row;
	}

	/**
	 * Get suspension id by comment
	 * 
	 * @param comment
	 * @return
	 * @Return String
	 * @Throws
	 */
	public String getSuspensionIdByComment(String comment) {
		IHtmlObject[] objs = browser.getTableTestObject(".id",
				"suspensionList_LIST");

		if (objs.length < 1) {
			throw new ObjectNotFoundException(
					"Table that id=suspensionList_LIST is not found !");
		}

		IHtmlTable table = (IHtmlTable) objs[0];
		List<Integer> fitRows = new ArrayList<Integer>();
		for(int i = 1; i < table.rowCount(); i ++) {
			if(table.getCellValue(i, 8).trim().equals(comment.trim())) {
				fitRows.add(i);
			}
		}
		if(fitRows.size() < 1) {
			throw new ErrorOnPageException("Can't find any suspension record whcih comment = " + comment);
		}
		if(fitRows.size() > 1) {
			throw new ErrorOnPageException("Find more than 1 suspension record which comment = " + comment);
		}
		
		String id = table.getCellValue(fitRows.get(0), 1);
		Browser.unregister(objs);
		return id;
	}

	/**
	 * select suspension
	 * 
	 * @param comments
	 *            unique comments that generated by
	 *            DataBaseFunctions.getEmailSequence()
	 * @Return void
	 * @Throws
	 */
	public void selectSuspension(String comments) {
		RegularExpression regx = new RegularExpression(
				"GenericGrid-\\d+\\.selectedItems", false);
		int row = this.getSuspensionRow(comments.trim());
		if (row < 1) {
			throw new ItemNotFoundException("No suspension whose comments="
					+ comments);
		}
		browser.selectCheckBox(".id", regx, row - 1);
	}
	
	public void selectAllSuspensions(){
		browser.selectCheckBox(".name", "all_slct");
	}

	public void clickSuspensionID(String commentsOrID) {
		if (!commentsOrID.matches("^[0-9]+$")) {
			commentsOrID = this.getSuspensionIdByComment(commentsOrID);
		}
		
		browser.clickGuiObject(".class", "Html.A", ".text", commentsOrID);
	}

	public void clickAddSuspension() {
		browser.clickGuiObject(".class", "Html.A", ".text", "Add Suspension");
	}

	public void clickActivate() {
		browser.clickGuiObject(".class", "Html.A", ".text", "Activate");
	}

	public void clickDeactivate() {
		browser.clickGuiObject(".class", "Html.A", ".text", "Deactivate");
	}

	public void clickRemove() {
		browser.clickGuiObject(".class", "Html.A", ".text", "Remove");
	}
	
	public boolean checkSuspensionExists(String suspensionID) {
		return browser.checkHtmlObjectExists(".class", "Html.A", ".text", suspensionID);
	}
}
