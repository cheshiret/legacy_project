<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="/opt/automation/functest" default="build" name="functest4_awo" xmlns:ivy="antlib:org.apache.ivy.ant" >
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>  
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>

	<property name="project.dir" value="${basedir}/functest4_awo" />
    <property name="findbugs.home" value="/usr/findbugs-1.3.9" />
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <property name="src" location="${project.dir}/java"/>
  	<property name="build" location="${project.dir}/bin"/>
  	<property name="lib.dir" value="${project.dir}/lib" />
	<property name="extlib.dir" value="${src}/extlib" />
	<property name="properties.dir" value="${project.dir}/properties"/>
	<property name="resources.dir" value="${project.dir}/resources"/>
	<property name="dist" value="${project.dir}/dist" />
	<property name="deployto" value="/mnt/automation/functest4" />
	<property name="ivy.file" value="${project.dir}/buildscript/ivy.xml" />
	<property name="ivysettings.file" value="${project.dir}/buildscript/ivysettings.xml" />
	<property name="version.file" value="${project.dir}/version.properties"/>
	<property name="ormsclient" location="ormsclient/bin"/>
	<property name="functest4_core" location="functest4_core/bin"/>
	<property name="awo.build.number" value="3.07.00"/>

	<path id="awo.classpath">
		<pathelement location="${src}"/>
		<pathelement location="${ormsclient}"/>
		<pathelement location="${functest4_core}"/>
		<fileset dir="${lib.dir}" includes="**/*.jar" />
		<fileset dir="${extlib.dir}" includes="**/*.jar" />
	</path>

  	<target name="proxy">
  		<property name="proxy.host" value="awotorproxy01.reserveamerica.com" />
  		<property name="proxy.port" value="8080" />
	    <property name="proxy.user" value=""/>
	    <property name="proxy.pass" value=""/>
	    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"
	      proxyuser="${proxy.user}" proxypassword="${proxy.pass}"/>
	</target>
	
    <target name="resolve" depends="proxy" description="resolve dependencies with ivy">
		<ivy:settings id="ivy.instance" file="${ivysettings.file}" />
		<ivy:resolve  file="${ivy.file}" />
		<ivy:retrieve sync="true" type="jar,bundle" pattern="${extlib.dir}/[artifact].[ext]" />
    </target>
    
    <target depends="resolve" name="init">
    	<!--Added by tchen 51-61
    	 <path id="test.test">
    	      <pathElement path="${build}"/>
    	      <pathelement path="${java.class.path}"/>
    	      <fileset dir="lib/">
    	        <patternset>
    	          <include name="**/*.jar"/>
    	        </patternset>
    	      </fileset>
    	    </path>
    	 <taskdef name="testng" classpathref="awo.classpath" classname="org.testng.TestNGAntTask" outputdir="${test-results.dir}" haltonfailure="true" useDefaultListeners="false" listeners="org.uncommons.reportng.HTMLReporter,org.uncommons.reportng.JUnitXMLReporter"/>
    	 -->
    </target>

    <target name="clean">
        <delete quiet="true">
            <fileset dir="${build}" includes="**/*.class"/>
        </delete>
    </target>

    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac 	fork="true"
		debug="true" 
		debuglevel="${debuglevel}" 
		srcdir="${src}" 
		destdir="${build}" 
		source="${source}" 
		target="${target}"
		memoryinitialsize="512m"
		memorymaximumsize="1024m"
		includeantruntime="false" >
            <classpath refid="awo.classpath"/>
        </javac>
    </target>
	
	<!--Added by tchen 89 - 99 
	<target name="test-compile" depends="init">
	    <javac srcdir="${src}" destdir="${build}" classpathref="awo.classpath" debug="true" debuglevel="source" verbose="2">
	      <include name="**/*Test*"/>
	    </javac>
	  </target>
	  <target name="test" depends="test-compile">
	    <testng classpathref="test.test" groups="standard">
	      <classfileset dir="${build}" includes="*Test*"/>
	    </testng>
	  </target>
	-->
	<!--pack functest4_awo build into a jar-->
	<target name="jar" depends="build,version">
		<jar destfile="${dist}/functest4_awo_${version}.jar" 
			basedir="${build}" 
			includes="com/activenetwork/qa/awo/**/*.class, version.properties"
			excludes="**/playground/**,**/test/**"
		/>
	</target>
	
    <target depends="build-project" name="findbugs" >
        <findbugs home="${findbugs.home}"
              output="xml"
              outputFile="testdriver_findbugs.xml" >
            <sourcePath path="${src}" />
            <class location="${build}" />
        </findbugs>
    </target>
	
	<target name="deploy" depends="jar">
		<copy includeemptydirs="false" flatten="true" todir="${deployto}/lib/awo">
			<fileset dir="${lib.dir}" includes="**/*.jar" />
			<fileset dir="${extlib.dir}" includes="**/*.jar" />
		</copy>
		<copy file="${dist}/functest4_awo_${version}.jar" todir="${deployto}"/>
		<copy includeemptydirs="false" flatten="true" todir="${deployto}/properties/">
			<fileset dir="${properties.dir}" excludes="**/*.xml" />
		</copy>
		<copy includeemptydirs="false" flatten="false" todir="${deployto}/resources">
			<fileset dir="${resources.dir}"/>
		</copy>
		<propertyfile file="${deployto}/version.properties">
			<entry key="awo.${awo.build.number}.version" value="${version}"/>
			<entry key="awo.${awo.build.number}.date"	value="now" type="date" />
			<entry key="awo.${awo.build.number}.svn.revision" value="${svn.revision}"/>
		</propertyfile>
	</target>
	
	<!--generate functest4_awo build number in format: <major>.<awo major build version>.<revision>-->
	<target name="version">
		<antfetch target="svn.revision" return="svn.revision"/>
		<if>
			<isset property="version"/>
			<then>
				<fail message="Version has been preset to ${version}"/>
			</then>
		</if>
		<property name="ver" value="revision"/>
		
		<if>
			<equals arg1="${ver}" arg2="revision"/>
			<then>
				<propertyfile file="${version.file}">	
					<entry key="major.number" default="04" operation="=" type="int"/>
					<entry key="build.number" default="00" operation="+" type="int"/>
					<entry key="awo.build.number" value="${awo.build.number}"/>
					<entry key="svn.revision" value="${svn.revision}"/>
					<entry key="build.date" value="now" type="date" />
				</propertyfile>	
			</then>
			<elseif>
				<equals arg1="${ver}" arg2="major"/>
				<then>	
					<propertyfile file="${version.file}">
						<entry key="major.number" default="04" operation="+" type="int"/>
						<entry key="build.number" value="00" operation="=" type="int"/>
						<entry key="awo.build.number" value="${awo.build.number}"/>
						<entry key="svn.revision" value="${svn.revision}"/>
						<entry key="build.date" value="now" type="date" />
					</propertyfile>	
				</then>
			</elseif>
			<else>
				<fail message="The version part ${ver} is not expected revision/minor/major"/>
			</else>			
		</if>
			
		<property file="${version.file}"/>
		<property name="version" value="${major.number}.${awo.build.number}.${build.number}"/>
		<echo>Version: ${version}</echo>
	</target>
	
	<target name="svn.revision">
		<exec executable="svn" output="${project.dir}/svninfo.xml" failonerror="true">
			<arg line="info functest4_awo --xml"/>
		</exec>
		<xmlproperty file="${project.dir}/svninfo.xml" collapseattributes="true"/>
		<property name="svn.revision" value="${info.entry.commit.revision}"/>
		<echo>SVN revision: ${svn.revision}</echo>
	</target>
	

</project>